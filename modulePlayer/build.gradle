//根据isModule标签动态的切换 集成/组件模式
if (isModule) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def cfg = rootProject.ext


android {
    compileSdkVersion cfg.defConfig.compileSdkVersion
    buildToolsVersion cfg.defConfig.buildToolsVersion

    defaultConfig {
        minSdkVersion cfg.defConfig.minSdkVersion
        targetSdkVersion cfg.defConfig.targetSdkVersion
        versionCode cfg.defConfig.versionCode
        versionName cfg.defConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        multiDexEnabled true

        if (!isModule) {
            applicationId cfg.appId['player']
        }

    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    dataBinding {
        enabled = true
    }

//    splits {
//        abi {
//            enable true
//            reset()
//            include 'x86', 'armeabi-v7a', 'x86_64'
//            universalApk true
//        }
//    }


    sourceSets {
        main {
//            jniLibs.srcDirs = ['libs']
            //在组件模式下 使用不同的manifest文件
            if (!isModule) {
                manifest.srcFile 'src/main/project/AndroidManifest.xml'
                java.srcDirs 'src/main/java'
                java.srcDirs 'src/main/project/java'
            } else {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
                java.srcDirs 'src/main/java'
                java.srcDirs 'src/main/module/java'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    def configAppDependencies = cfg.appDependencies
    implementation configAppDependencies.dagger2
    kapt configAppDependencies.daggerComiler
    implementation configAppDependencies.rxJava
    implementation configAppDependencies.rxAndroid
    implementation configAppDependencies.multiDex
    implementation configAppDependencies.constraintlayout
    implementation configAppDependencies.material
//    implementation configAppDependencies.autoDisposableKtx
//    implementation configAppDependencies.autoDisposableAndroidKtx
//    implementation configAppDependencies.autoArchcomponentsKtx

    implementation project(':moduleConfig')
    if (isModule) {
        implementation project(':moduleBase')
    }
//    api "tv.danmaku.ijk.media:ijkplayer-java:0.8.8"
//    api "tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8"

    implementation project(":ijkplayer-armv7a")
    implementation project(":ijkplayer-armv5")
    implementation project(":ijkplayer-arm64")
    implementation project(":ijkplayer-x86")
    implementation project(":ijkplayer-x86_64")

    implementation project(":ijkplayer-exo")
    implementation project(":ijkplayer-java")

//    compile(name: 'armv7-fmmr', ext: 'aar')
    implementation 'com.danikula:videocache:2.7.1'


    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever-core:1.0.15'
    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever-native:1.0.15'
    implementation 'com.google.vr:sdk-videowidget:1.10.0'


//    implementation 'com.github.ashqal:MD360Player4Android:2.4.1'
}
